# Even Fibonacci numbers
# Problem 1
	# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
	# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

#!/usr/bin/env/python

# workflow to check whether the new number is even
def check_sum(new_number_in_sequence):
	sum_of_numbers = 0
	if (new_number_in_sequence % 2 == 0):
		sum_of_numbers = sum_of_numbers + new_number_in_sequence

	return sum_of_numbers


# recursive workflow to find new number of the sequence and check if the new number is even
def generate_fibonacci_and_get_even_numbers(start, end, even_sum):
	sum_of_even_numbers = even_sum
	first_number, second_number = start, end
	
	sum_of_even_numbers = sum_of_even_numbers + check_sum(first_number)

	if (second_number <= 4000000):
		first_number = second_number
		second_number = start + second_number
		generate_fibonacci_and_get_even_numbers(first_number, second_number, sum_of_even_numbers)

	else:
		print(sum_of_even_numbers)


# main function to retrieve fibonacci numbers and find even numbers
def main():
	generate_fibonacci_and_get_even_numbers(start = 0, end = 1, even_sum = 0)


# calling the main function
main()